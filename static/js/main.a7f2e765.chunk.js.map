{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/SearchBox.jsx","components/ErrorBoundry.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","username","email","className","src","alt","CardList","filteredRobots","map","robot","key","id","Scroll","style","overflowY","height","border","children","SearchBox","onChange","onSearch","type","placeholder","ErrorBoundry","state","hasError","this","Component","App","onSearchChange","event","setState","searchField","target","value","robots","fetch","then","response","json","user","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,MAbf,SAAcC,GAAQ,IACbC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACxB,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAK,wBAA0BH,EAAW,gBAAiBI,IAAI,SACpE,yBAAKF,UAAU,MACd,4BAAKH,GACL,2BAAIE,MCIOI,EAVE,SAACP,GACjB,OACC,6BACEA,EAAMQ,eAAeC,KAAI,SAACC,GAC1B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAME,GAAIX,KAAMS,EAAMT,KAAMC,SAAUQ,EAAMR,SAAUC,MAAOO,EAAMP,aCD1EU,EAJA,SAACb,GACf,OAAO,yBAAKc,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,oBAAsBjB,EAAMkB,W,MCejFC,MAff,SAAmBnB,GAClB,OACC,6BACC,wBAAII,UAAU,MAAd,UACA,2BACCgB,SAAUpB,EAAMqB,SAChBjB,UAAU,gCACVkB,KAAK,SACLrB,KAAK,SACLsB,YAAY,oBCMDC,E,kDAfd,WAAYxB,GAAQ,IAAD,8BAClB,gBACKyB,MAAQ,CACZC,UAAU,GAHO,E,qDAQlB,OAAKC,KAAKF,MAAMC,SAGTC,KAAK3B,MAAMkB,SAFV,gE,GAViBU,aC2EZC,E,kDAvCd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKV,MAAQ,CACZW,OAAQ,GACRH,YAAa,IAJD,E,gEAQO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEI,OAAQK,S,+BAOhC,IAAD,EACwBd,KAAKF,MAA7BW,EADA,EACAA,OAAQH,EADR,EACQA,YACVzB,EAAiB4B,EAAOM,QAAO,SAAChC,GACrC,OAAOA,EAAMT,KAAK0C,cAAcC,SAASX,EAAYU,kBAGtD,OAAQP,EAAOS,OAGd,yBAAKzC,UAAU,MACd,kBAAC,EAAD,CAAWiB,SAAUM,KAAKG,iBAC1B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,eAAgBA,OAN7B,+C,GA1BeoB,aCzBEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7f2e765.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card(props) {\r\n\tconst { name, username, email } = props;\r\n\treturn (\r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-3\">\r\n\t\t\t<img src={'https://robohash.org/' + username + '?size=200x200'} alt=\"Robo\" />\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{props.filteredRobots.map((robot) => {\r\n\t\t\t\treturn <Card key={robot.id} name={robot.name} username={robot.username} email={robot.email} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn <div style={{ overflowY: 'scroll', height: '800px', border: '1px solid black' }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport './searchBox.css';\r\n\r\nfunction SearchBox(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1 className=\"f1\">Robots</h1>\r\n\t\t\t<input\r\n\t\t\t\tonChange={props.onSearch}\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-light-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tname=\"search\"\r\n\t\t\t\tplaceholder=\"Search Robots\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: true\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!this.state.hasError) {\r\n\t\t\treturn <h1>Ooops. An Error Has Occured.</h1>;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// function App() {\r\n// \tconst [\r\n// \t\trobotState,\r\n// \t\tsetRobotState\r\n// \t] = useState(robots);\r\n// \tconst [\r\n// \t\tsearchState,\r\n// \t\tsetSearchState\r\n// \t] = useState('');\r\n\r\n// \tconst handler = (event) => {\r\n// \t\tsetSearchState(event.target.value);\r\n// \t\tconst filteredRobots = robots.filter((robot) => {\r\n// \t\t\treturn robot.name.toLowerCase().includes(searchState.toLowerCase());\r\n// \t\t});\r\n// \t\tsetRobotState(filteredRobots);\r\n// \t\tconsole.log(searchState);\r\n// \t\tconsole.log(robotState);\r\n// \t};\r\n\r\n// \treturn (\r\n// \t\t<div className=\"tc\">\r\n// \t\t\t<SearchBox onSearch={handler} />\r\n// \t\t\t{robotState.map((robot) => {\r\n// \t\t\t\treturn <Card key={robot.id} name={robot.name} username={robot.username} email={robot.email} />;\r\n// \t\t\t})}\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((user) => this.setState({ robots: user }));\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { robots, searchField } = this.state;\r\n\t\tconst filteredRobots = robots.filter((robot) => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\r\n\t\treturn !robots.length ? (\r\n\t\t\t<h1>Loading....</h1>\r\n\t\t) : (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<SearchBox onSearch={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList filteredRobots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}