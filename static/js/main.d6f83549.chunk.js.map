{"version":3,"sources":["components/card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","probs","name","email","id","className","src","alt","CardList","robots","cardsArray","map","users","i","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","App","onSeachChange","event","setState","searchField","target","value","state","fetch","then","response","json","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,wBAAoDG,IAAI,UAChE,6BACC,4BAAKL,GACL,2BAAIC,MCEOK,EAPE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAaD,EAAOE,KAAI,SAACC,EAAOC,GACrC,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGT,GAAIA,GAAIK,EAAOI,GAAGT,GAAID,MAAOM,EAAOI,GAAGV,MAAOD,KAAMO,EAAOI,GAAGX,UAE3F,OAAO,6BAAMQ,ICOCK,EAbG,SAACd,GAClB,OACC,yBAAKI,UAAU,OACd,2BACCA,UAAU,mCACVW,KAAK,OACLC,YAAY,gBACZC,SAAUjB,EAAMkB,iBCHLC,EAJA,SAACnB,GACf,OAAO,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAYvB,EAAMwB,WC+CjFC,G,wDA1Cd,aAAe,IAAD,8BACb,gBAgBDC,cAAgB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAhB1C,EAAKC,MAAQ,CACZxB,OAAQ,GACRqB,YAAa,IAJD,E,gEAOO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAK,SAACvB,GACN,EAAKiB,SAAS,CAAEpB,OAAQG,S,+BAQjB,IAAD,EACwB0B,KAAKL,MAA7BxB,EADA,EACAA,OAAQqB,EADR,EACQA,YACVS,EAAe9B,EAAO+B,QAAO,SAACC,GACnC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASb,MAE1C,OAAsB,IAAlBrB,EAAOmC,OACH,0CAGN,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcmB,KAAKX,gBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GAnCNM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d6f83549.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (probs) => {\r\n\tconst { name, email, id } = probs;\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200\" alt=\"robot`} alt=\"robot\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardsArray = robots.map((users, i) => {\r\n\t\treturn <Card key={robots[i].id} id={robots[i].id} email={robots[i].email} name={robots[i].name} />;\r\n\t});\r\n\treturn <div>{cardsArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = (probs) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Search Robots\"\r\n\t\t\t\tonChange={probs.searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (probs) => {\r\n\treturn <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>{probs.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n// import { robots } from './robots';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((users) => {\r\n\t\t\t\tthis.setState({ robots: users });\r\n\t\t\t});\r\n\t}\r\n\r\n\tonSeachChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { robots, searchField } = this.state;\r\n\t\tconst filterRobots = robots.filter((robot) => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField);\r\n\t\t});\r\n\t\tif (robots.length === 0) {\r\n\t\t\treturn <h1>Loading...</h1>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1 className=\"f1\">Robo Friens</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSeachChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filterRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}